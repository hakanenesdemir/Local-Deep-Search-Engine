# ğŸ”¹ 1. venvâ€™in Ã–nemi
# Pythonâ€™da venv (sanal ortam), projeni izole etmek iÃ§in kullanÄ±lÄ±r.
# ğŸ‘‰ Neden Ã¶nemli?
# Her proje farklÄ± Python paket sÃ¼rÃ¼mleri isteyebilir.
# Global (tÃ¼m sistem) Python ortamÄ±na paket yÃ¼klemek karÄ±ÅŸÄ±klÄ±k yaratÄ±r.
# venv, projeye Ã¶zel bir Python ortamÄ± yaratÄ±r â†’ baÄŸÄ±mlÄ±lÄ±klar Ã§akÄ±ÅŸmaz.
# Bir projede Django 4.2 kullanÄ±rken, diÄŸerinde Django 5.0 kullanabilirsin.
# Daha gÃ¼venli: sistemin Pythonâ€™una zarar vermezsin.
# Yani: venv = proje iÃ§in Ã¶zel, izole edilmiÅŸ Python dÃ¼nyasÄ±.

# ğŸ”¹ 2. venv NasÄ±l OluÅŸturulur?
# Bir klasÃ¶r iÃ§inde sanal ortam yaratmak iÃ§in:
# python -m venv venv

# aktifleÅŸtirmek iÃ§in

# bash(windows):
# venv\Scripts\activate

# Linux/Mac:
# source venv/bin/activate

#Devre dÄ±ÅŸÄ± bÄ±rakmak: deactivate

# Dosya yapÄ±sÄ± ve iÃ§erikleri
# venv/
# â”œâ”€â”€ Include/        # (Windows'ta bulunur) C header dosyalarÄ±
# â”œâ”€â”€ Lib/            # Paketlerin kurulduÄŸu yer (site-packages burada)
# â”‚   â””â”€â”€ site-packages/
# â”œâ”€â”€ Scripts/ (Windows) veya bin/ (Linux/Mac)
# â”‚   â”œâ”€â”€ activate    # OrtamÄ± aktifleÅŸtiren script
# â”‚   â”œâ”€â”€ pip         # Bu ortama Ã¶zel pip
# â”‚   â””â”€â”€ python      # Bu ortama Ã¶zel python
# â”œâ”€â”€ pyvenv.cfg      # Ortam ayarlarÄ±nÄ± tutan dosya


# Bir projede kullanÄ±m dÃ¼zeni
# proje_adi/
# â”œâ”€â”€ venv/                 # Sanal ortam (genelde .gitignore edilir)
# â”œâ”€â”€ src/ veya app/        # Kaynak kodlarÄ±n
# â”‚   â”œâ”€â”€ __init__.py
# â”‚   â””â”€â”€ main.py
# â”œâ”€â”€ requirements.txt      # Ortam baÄŸÄ±mlÄ±lÄ±klarÄ±nÄ±n listesi
# â””â”€â”€ README.md

#=================================================================================================================================================
#       Komut                       |           AnlamÄ±                                                   |       Nerede Ã‡alÄ±ÅŸÄ±r?
# pip freeze > requirements.txt	    |pip freeze, o anda etkin olan sanal ortama (venv)                   |Projenin geliÅŸtirildiÄŸi bilgisayarda,
#                                   |hangi paketlerin hangi versiyonlarla kurulduÄŸunu listeler.          |venv etkinleÅŸtirilmiÅŸken.
#                                   |> iÅŸareti ise bu Ã§Ä±ktÄ±yÄ± terminale yazdÄ±rmak yerine,                |   
#                                   |requirements.txt adÄ±ndaki bir dosyaya kaydetmeye yarar.	         | 

# Ã–nemi:	Bu, projenizin bir "paket listesi manifestosu"dur. Bu dosyayÄ± projenizin kaynak koduna (GitHub/GitLab vb.) dahil edersiniz.


# Alttaki komut requirements.txt iÃ§erisinde olan baÄŸÄ±mlÄ±lÄ±klarÄ±n yÃ¼klenmesini saÄŸlar.
#=================================================================================================================================================

# Komut	                                                AnlamÄ±	                                                         Nerede Ã‡alÄ±ÅŸÄ±r?
# pip install -r requirements.txt	 |pip install komutunun yanÄ±ndaki -r (recursive veya requirements    |Projenin yeni klonlandÄ±ÄŸÄ± bilgisayarda, yeni
#                                    |kelimesinden gelir) bayraÄŸÄ±, pip'e tek bir paket kurmak yerine,    |venv etkinleÅŸtirildikten sonra. 
#                                    |belirtilen dosyadaki (requirements.txt) tÃ¼m paketleri listeye gÃ¶re |
#                                    |kurmasÄ±nÄ± sÃ¶yler.	                                                 |
       
# Ã–nemi:	Bu komut sayesinde, projeyi klonlayan herkes (veya projeyi daÄŸÄ±ttÄ±ÄŸÄ±nÄ±z sunucu), tek bir komutla projenin ihtiyaÃ§ duyduÄŸu yÃ¼zlerce paketi (ve doÄŸru versiyonlarÄ±nÄ±) otomatik olarak kurabilir.

# KÄ±saca:
# Neden Bu Kadar Ã–nemli?
# Bu iki adÄ±m, Python'daki tekrar Ã¼retilebilirlik (reproducibility) ilkesinin temelini oluÅŸturur.
#   â€¢ Projemi 6 ay sonra a.tÄ±ÄŸÄ±mda, tÃ¼m baÄŸÄ±mlÄ±lÄ±klarÄ± hatÄ±rlamak zorunda kalmam.
#   â€¢ TakÄ±m arkadaÅŸÄ±mÄ±zÄ±n projesi, benim bilgisayarÄ±mdaki paket versiyonlarÄ± farklÄ± olduÄŸu iÃ§in bozulmaz.

# source venv/bin/activate

# Kurulu kÃ¼tÃ¼phanenin sÃ¼rÃ¼mÃ¼nÃ¼ sanal ortamdaysak kontrol edelim normal bash iÃ§erisindeysek kontrol etmek iÃ§in
# pip show library_name   

# Dosya dÃ¼zeni bÃ¶yle olmalÄ±

# local-deepsearch/
# â”œâ”€â”€ .gitignore
# â”œâ”€â”€ README.md
# â”œâ”€â”€ pyproject.toml        # opsiyonel (poetry/modern paketleme)
# â”œâ”€â”€ requirements.txt      # production deps
# â”œâ”€â”€ requirements-dev.txt  # geliÅŸtirme deps (lint, test tool)
# â”œâ”€â”€ venv/                 # sanal ortam (genelde .gitignore edilir)
# â”œâ”€â”€ src/                  # kaynak kod (package layout Ã¶nerisi)
# â”‚   â””â”€â”€ deepsearch/
# â”‚       â”œâ”€â”€ __init__.py
# â”‚       â”œâ”€â”€ main.py
# â”‚       â””â”€â”€ utils.py
# â”œâ”€â”€ tests/
# â”‚   â””â”€â”€ test_utils.py
# â””â”€â”€ scripts/
#     â””â”€â”€ dev_run.sh
